#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: e55dda9f-ac9b-48df-94d9-cfbef44fe2d6
# Source File: SAPIEN\PowerShell Studio 2012\Files\FormFetchPassword.pff
#------------------------------------------------------------------------
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
xhYAAB+LCAAAAAAABADFWF1v6kYQfa/U/2D5oU8UMOYj3BIkYsJt1HxQoGkfkKLFHsg2ay/aXSdx
1R/fWWMTDKYYbpKrSBE7ntk5O+d4dr2dEbj8GUTUJ4p0f/zBMDp3gi5oQNiAMrglPnQHXPgDUO7j
kEj5woVXXs7nncqOXxytR/cgJOVB1yrXOpVNw2r+2d/gKkNFSzg3x5FU4Jf/pIHHX2RZp1r9Lxl5
j0pGMtV5vVzVfyXDCZkKBZwHECpBWMkYhjNG3d8gmvAnCM5nrRZpuI2m1bbrUD1rm0aAYM/NOc53
Q2hgGu4jZZ5AV9PhgRKcSTNGiliHgi9BqCiJcRiFQI3pP2B2G2f1kmE3cYWp054gXRuzm6Y76D5W
RKghl1ThMs2ugwlBjF0BcDh2Aq/K7F7fjfqGw8WybFxzlzCj5/k0MFL2jJhLY3eyy2fMlcx0zYln
xszH1gc97lTi36n7YR6vyQzYhxPJdJbB1W3//5jcrdUAPczuDXUFl3yujDEJpDEGQeclw6ou1U59
dqfQ1V2xZNkY1CgQshLDGnKBiJXa6ii2mlXAfUJmV4EHryjQIt6xYDSSLwW9e4wuAl03z2OwEueu
kiorbRRXip75gr9+uFYU5pnx1zEQ4T4ep5c3shvIhdUsTHYmZ3HC7SYyXj2K8UL6iBl3nMHZ74PL
d2DuIlSKBx9O3CxO82281dtYUssuTNxmzsK8tRpIW5Ecb7QVIjmm7SfiL38pDOgPCfdUhoSNVcTg
grhPDmdcmN2JCCEvfnMDwK3OfcrW4CG2be0CRwtGHzS+CurdU3j5cNl4mGyByZ4x2QgkziKPU0+P
Mf6ChRQT3vO8EWLEdkmYzK3f/tg+MFBwZHiouNYUkhb6gbzhHsqrT+WSkQg8BxiTx+1RtZJR3z2u
7FN/TukKxI6AeHcBi/aLLPetaTSR5FqrfdR7k7uWjIbjyv2KkEDc8FBCIuqcpT3k+36r2D+1O16+
UnWkugP3UTeEC47xeOQe0cXjcQeferuFp+Ba68imqqF+ZEutF26pl3FPLQbn/RqqXv/Bdpod9KQE
H9UAMvVNLFF3pa43PdVO1dO/zpdpotHp+mRcvr2cTAcCF4FfD0/TZz17o9qqtaaJqj3GOpU1mHxw
5RsSkAX4uNSybmx+rJ83yFZRyLY1m9tnjSbx7GYd7MbhzHteuk8uUrYvFCpZX5AXGixOgVy15415
a25ZXqNKbHIa5CT/AbC+dLlgdPYO7axASbBzfzcKdfJizP3ls88pBxXYH7iI8Lv1mbpw0p5yilb0
7HbVttrTfUiKFcrhAt6hUqdh1smLwUwWhQ0eV/b9ipyFkQN9PUx3ic4QNynsuyJd2VcIAAFubHEr
h/UF3moXyrUmxis3ucnLuGat2O3pHKRyBMSNXn+a7tjW3k4ocUdIn2/Mve/BkBGlL9S6P+tP3nSw
fjwKg/Gkp7+rkl/p5ppdfWcMbigobu+V1LJ5URkbsteZMdu7V5rpWcELXbXjvGXf9t8ufJ61D9IV
dJktWiXX6nB/SYJos4bbFocvI6EPehmnHduVvtoJCNsCmG/OvQtODjR7HyEy/+3ok2D1Nw9DmXvj
yoaWkdnNe+v/AABIZy/GFgAA#>
#endregion
#========================================================================
# Code Generated By: SAPIEN Technologies, Inc., PowerShell Studio 2012 v3.0.8
# Generated On: 8/28/2012 3:29 PM
# Generated By: Administrator
#========================================================================
#----------------------------------------------
#region Application Functions
#----------------------------------------------

function OnApplicationLoad {
	#Note: This function is not called in Projects
	#Note: This function runs before the form is created
	#Note: To get the script directory in the Packager use: Split-Path $hostinvocation.MyCommand.path
	#Note: To get the console output in the Packager (Windows Mode) use: $ConsoleOutput (Type: System.Collections.ArrayList)
	#Important: Form controls cannot be accessed in this function
	#TODO: Add snapins and custom code to validate the application load
	Import-Module Repro
	
	return $true #return true for success or false for failure
}

function OnApplicationExit {
	#Note: This function is not called in Projects
	#Note: This function runs after the form is closed
	#TODO: Add custom code to clean up and unload snapins when the application exits
	
	$script:ExitCode = 0 #Set the exit code for the Packager
}

#endregion Application Functions

#----------------------------------------------
# Generated Form Function
#----------------------------------------------
function Call-FormFetchPassword_pff {

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load("System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")
	[void][reflection.assembly]::Load("mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formMain = New-Object 'System.Windows.Forms.Form'
	$labelFIND = New-Object 'System.Windows.Forms.Label'
	$textboxSearch = New-Object 'System.Windows.Forms.TextBox'
	$buttonSearch = New-Object 'System.Windows.Forms.Button'
	$datagridviewResults = New-Object 'System.Windows.Forms.DataGridView'
	$buttonExit = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	
	
	
	
	
	
	#region Control Helper Functions
	function Load-DataGridView
	{
		<#
		.SYNOPSIS
			This functions helps you load items into a DataGridView.
	
		.DESCRIPTION
			Use this function to dynamically load items into the DataGridView control.
	
		.PARAMETER  DataGridView
			The ComboBox control you want to add items to.
	
		.PARAMETER  Item
			The object or objects you wish to load into the ComboBox's items collection.
		
		.PARAMETER  DataMember
			Sets the name of the list or table in the data source for which the DataGridView is displaying data.
	
		#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			[System.Windows.Forms.DataGridView]$DataGridView,
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			$Item,
		    [Parameter(Mandatory=$false)]
			[string]$DataMember
		)
		$DataGridView.SuspendLayout()
		$DataGridView.DataMember = $DataMember
		
		if ($Item -is [System.ComponentModel.IListSource]`
		-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
		{
			$DataGridView.DataSource = $Item
		}
		else
		{
			$array = New-Object System.Collections.ArrayList
			
			if ($Item -is [System.Collections.IList])
			{
				$array.AddRange($Item)
			}
			else
			{	
				$array.Add($Item)	
			}
			$DataGridView.DataSource = $array
		}
		
		$DataGridView.ResumeLayout()
	}
	
	function Convert-ToDataTable
	{
		<#
			.SYNOPSIS
				Converts objects into a DataTable.
		
			.DESCRIPTION
				Converts objects into a DataTable, which are used for DataBinding.
		
			.PARAMETER  InputObject
				The input to convert into a DataTable.
		
			.PARAMETER  Table
				The DataTable you wish to load the input into.
		
			.PARAMETER RetainColumns
				This switch tells the function to keep the DataTable's existing columns.
			
			.PARAMETER FilterWMIProperties
				This switch removes WMI properties that start with an underline.
		
			.EXAMPLE
				Convert-ToDataTable -InputObject (Get-Process) -Table $DataTable
		#>
		
		param(
		$InputObject, 
		[ValidateNotNull()]
		[System.Data.DataTable]$Table,
		[switch]$RetainColumns,
		[switch]$FilterWMIProperties)
		
		if($InputObject -is [System.Data.DataTable])
		{
			$Table = $InputObject
			return
		}
		
		if(-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
	
			if($InputObject -eq $null){ return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach($item in $InputObject)
			{
				if($item -ne $null)
				{
					$object = $item
					break	
				}
			}
	
			if($object -eq $null) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			$properties = Get-Member -MemberType 'Properties' -InputObject $object
			foreach ($prop in $properties)
			{
				if(-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__'))#filter out WMI properties
				{
					#Get the type from the Definition string
					$index = $prop.Definition.IndexOf(' ')
					$type = $null
					if($index -ne -1)
					{
						$typeName = $prop.Definition.SubString(0, $index)
						try{ $type = [System.Type]::GetType($typeName) } catch {}
					}
	
					if($type -ne $null -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
		      			[void]$table.Columns.Add($prop.Name, $type) 
					}
					else #Type info not found
					{ 
						[void]$table.Columns.Add($prop.Name) 	
					}
				}
		    }
		}
		else
		{
			$Table.Rows.Clear()	
		}
		
		$count = $table.Columns.Count
		foreach($item in $InputObject)
		{
			$row = $table.NewRow()
			
			for ($i = 0; $i -lt $count;$i++)
	    	{
				$column = $table.Columns[$i]
				$prop = $column.ColumnName	
				
				$value = Invoke-Expression ('$item.{0}' -f $prop)
				if($value -ne $null)
				{
					$row[$i] = $value
				}
			}
			
			[void]$table.Rows.Add($row)
		}
	}
	#endregion
	
	#region MyFunctions
	function RetrieveCSEDetails
	{
	    $AllDetails = @()
	    
	    if(($textboxSearch.Text -like "*CN=*") -or($textboxSearch.Text -like "*DN=*"))
		{
			$strFilter = "(&(objectClass=Computer)(name=*))"
			$objDomain = New-Object System.DirectoryServices.DirectoryEntry("LDAP://$($TextboxSearch.Text)")
		}
		else
		{
			$strFilter = "(&(objectClass=Computer)(name=$($TextBoxSearch.Text)))"
			$objDomain = New-Object System.DirectoryServices.DirectoryEntry
		}
		
	    
	   
	    
	    $objSearcher = New-Object System.DirectoryServices.DirectorySearcher
	    $objSearcher.SearchRoot = $objDomain
	    $objSearcher.PageSize = 1000
	    $objSearcher.Filter = $strFilter
	    $objSearcher.SearchScope = "SubTree"
	    
	    $colPropList = "name","ms-MCS-AdmPwd","ms-MCS-AdmPwdExpirationTime"
	    
	    foreach($prop in $colPropList)
	    {
	         [void]$objSearcher.PropertiesToLoad.Add($prop)
	    }
	    
	    $colResults = $objSearcher.FindAll()
	    foreach ($result in $colResults)
	    {
	        
			$name = $null
			$Password = $null
			$Expire = $null
			
			[string]$name = $result.Properties.name
	        [string]$Password = $result.Properties.Item("ms-MCS-AdmPwd")
	        $Expire = [DateTime]::FromFileTime([Int64]::Parse($result.Properties.Item("ms-MCS-AdmPwdExpirationTime")))
	        
	                
	        $details = New-Object PSObject
	        $details | Add-Member NoteProperty Name $name
	        $details | Add-Member NoteProperty Password $Password
	        $details | Add-Member NoteProperty Expires $Expire
	        $AllDetails += $details
	        
	    }
		
		Return $AllDetails
	 }
	#endregion
	#region Search Function
	function SearchGrid()
	{
		$RowIndex = 0
		$ColumnIndex = 0
		$searchString = RetrieveCSEDetails
		
		if($searchString -eq "")
		{
			return
		}
		
		if($datagridviewResults.SelectedCells.Count -ne 0)
		{
			$startCell = $datagridviewResults.SelectedCells[0];
			$RowIndex = $startCell.RowIndex
			$ColumnIndex = $startCell.ColumnIndex + 1
		}
		
		$columnCount = $datagridviewResults.ColumnCount
		$rowCount = $datagridviewResults.RowCount
		for(;$RowIndex -lt $rowCount; $RowIndex++)
		{
			$Row = $datagridviewResults.Rows[$RowIndex]
			
			for(;$ColumnIndex -lt $columnCount; $ColumnIndex++)
			{
				$cell = $Row.Cells[$ColumnIndex]
				
				if($cell.Value.ToString().IndexOf($searchString, [StringComparison]::OrdinalIgnoreCase) -ne -1)
				{
					$datagridviewResults.CurrentCell = $cell
					return
				}
			}
			
			$ColumnIndex = 0
		}
		
		$datagridviewResults.CurrentCell = $null
		[void][System.Windows.Forms.MessageBox]::Show("The search has reached the end of the grid.","String not Found")
		
	}
	#endregion
	
	$FormEvent_Load={
		#TODO: Initialize Form Controls here
		
	}
	
	$buttonExit_Click={
		#TODO: Place custom script here
		$formMain.Close()
	}
	
	
	
	$buttonSearch_Click={
		$results = RetrieveCSEDetails
		Load-DataGridView -DataGridView $datagridviewResults -Item $results
	}
	
	$datagridviewResults_ColumnHeaderMouseClick=[System.Windows.Forms.DataGridViewCellMouseEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellMouseEventArgs]
		if($datagridviewResults.DataSource -is [System.Data.DataTable])
		{
			$column = $datagridviewResults.Columns[$_.ColumnIndex]
			$direction = [System.ComponentModel.ListSortDirection]::Ascending
			
			if($column.HeaderCell.SortGlyphDirection -eq 'Descending')
			{
				$direction = [System.ComponentModel.ListSortDirection]::Descending
			}
	
			$datagridviewResults.Sort($datagridviewResults.Columns[$_.ColumnIndex], $direction)
		}
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formMain.WindowState = $InitialFormWindowState
	}
	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonSearch.remove_Click($buttonSearch_Click)
			$datagridviewResults.remove_ColumnHeaderMouseClick($datagridviewResults_ColumnHeaderMouseClick)
			$buttonExit.remove_Click($buttonExit_Click)
			$formMain.remove_Load($FormEvent_Load)
			$formMain.remove_Load($Form_StateCorrection_Load)
			$formMain.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	#
	# formMain
	#
	$formMain.Controls.Add($labelFIND)
	$formMain.Controls.Add($textboxSearch)
	$formMain.Controls.Add($buttonSearch)
	$formMain.Controls.Add($datagridviewResults)
	$formMain.Controls.Add($buttonExit)
	$formMain.ClientSize = '584, 362'
	$formMain.Name = "formMain"
	$formMain.StartPosition = 'CenterScreen'
	$formMain.Text = "LORD Corp. Local Admin Password Fetch "
	$formMain.add_Load($FormEvent_Load)
	#
	# labelFIND
	#
	$labelFIND.Font = "Microsoft Sans Serif, 10pt"
	$labelFIND.Location = '13, 15'
	$labelFIND.Name = "labelFIND"
	$labelFIND.Size = '44, 21'
	$labelFIND.TabIndex = 5
	$labelFIND.Text = "FIND:"
	$labelFIND.TextAlign = 'MiddleCenter'
	#
	# textboxSearch
	#
	$textboxSearch.Location = '54, 16'
	$textboxSearch.Name = "textboxSearch"
	$textboxSearch.Size = '436, 20'
	$textboxSearch.TabIndex = 1
	$textboxSearch.Text = "CCF8QFE"
	#
	# buttonSearch
	#
	$buttonSearch.Location = '496, 13'
	$buttonSearch.Name = "buttonSearch"
	$buttonSearch.Size = '75, 23'
	$buttonSearch.TabIndex = 0
	$buttonSearch.Text = "&Search"
	$buttonSearch.UseVisualStyleBackColor = $True
	$buttonSearch.add_Click($buttonSearch_Click)
	#
	# datagridviewResults
	#
	$datagridviewResults.AllowUserToAddRows = $False
	$datagridviewResults.AllowUserToDeleteRows = $False
	$datagridviewResults.AutoSizeColumnsMode = 'DisplayedCells'
	$datagridviewResults.Location = '12, 42'
	$datagridviewResults.Name = "datagridviewResults"
	$datagridviewResults.ReadOnly = $True
	$datagridviewResults.Size = '560, 279'
	$datagridviewResults.TabIndex = 2
	$datagridviewResults.add_ColumnHeaderMouseClick($datagridviewResults_ColumnHeaderMouseClick)
	#
	# buttonExit
	#
	$buttonExit.Anchor = 'Bottom, Right'
	$buttonExit.Location = '497, 327'
	$buttonExit.Name = "buttonExit"
	$buttonExit.Size = '75, 23'
	$buttonExit.TabIndex = 4
	$buttonExit.Text = "E&xit"
	$buttonExit.UseVisualStyleBackColor = $True
	$buttonExit.add_Click($buttonExit_Click)
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formMain.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formMain.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formMain.add_FormClosed($Form_Cleanup_FormClosed)
	#Show the Form
	return $formMain.ShowDialog()

} #End Function

#Call OnApplicationLoad to initialize
if((OnApplicationLoad) -eq $true)
{
	#Call the form
	Call-FormFetchPassword_pff | Out-Null
	#Perform cleanup
	OnApplicationExit
}
